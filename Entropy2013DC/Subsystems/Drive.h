
#ifndef DRIVE_H
#define DRIVE_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../EntropyRobotDrive.h"
/**
 *
 *
 * @author ExampleAuthor
 */
class Drive: public Subsystem {
private:
	// It's desirable that everything possible under private except
	// for methods that implement subsystem capabilities
public:
	// The following variables are automatically assigned by
	// robotbuilder and will be updated the next time you export to
	// Java from robot builder. Do not put any code or make any change
	// in the following block or it will be lost on an update. To
	// prevent this subsystem from being automatically updated, delete
	// the following line.
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Encoder* quadratureEncoderRight;
	Encoder* quadratureEncoderLeft;
	EntropyRobotDrive* robotDrive4;
	CANJaguar* cANJaguarRearRight;
	CANJaguar* cANJaguarFrontRight;
	CANJaguar* cANJaguarRearLeft;
	CANJaguar* cANJaguarFrontLeft;
	Gyro *gyro;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Drive();
	void InitDefaultCommand();
	float GetDistance();
	void ArcadeDrive(GenericHID *stick);
	void ResetDistance();
	
	/* dist is always positive and in feet, speed is positive or negative for forwards/backwards, range is -1 to 1*/ 
	void auto_drive_straight(float dist, float speed); 
	
	/* degrees is always positive, speed always positive, range is -1 to 1*/ 
	void auto_turn_left (float radius, float speed, float degrees);
	void auto_turn_right (float radius, float speed, float degrees);
	
	/*this does its own thing, ignore it*/
	float auto_get_speed(float dist, float distance, float speed);
	float GetLeftDistance();
	float GetRightDistance();
	float GetAngle();
private: 
	bool LeftInvFlag;
	bool RightInvFlag;
	
};
#endif
