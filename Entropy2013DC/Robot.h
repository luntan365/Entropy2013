#ifndef _ROBOT_H
#define _ROBOT_H

#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "Commands/AutonomousCommand1.h"
#include "Commands/AutonomousCommand2.h"
#include "Commands/AutonomousCommand3.h"
#include "Commands/AutonomousCommand4.h"
#include "Commands/AutonomousCommand5.h"
#include "Commands/AutonomousCommand6.h"
#include "Commands/AutonomousCommand7.h"
#include "Commands/AutonomousCommand8.h"
#include "Commands/AutonomousCommand9.h"
#include "Commands/Auto1.h"
#include "Subsystems/Drive.h"
#include "LiveWindow/LiveWindow.h"
#include "Subsystems/ElControl.h"
#include "Subsystems/AzCOntrol.h"
#include "Subsystems/ShootSolenoid.h"
#include "Subsystems/Shooter.h"
#include "Subsystems/PickupSystem.h"
#include "Subsystems/CameraTilt.h"
#include "OI.h"


#define ELSPEEDPID .40f
#define ELPIDTOLERANCE 5.0f
#define AZSPEEDPID .15f
#define AZPIDTOLERANCE 7.0f

#ifdef COMPETITION_ROBOT
	#define ELAVMINVALUE 1650.0
	#define ELAVMAXVALUE 1927.0
	#define AZIMUTHMINVALUE 294.0
	#define AZIMUTHMAXVALUE 811.0
#else
	#define ELAVMINVALUE 1650.0
	#define ELAVMAXVALUE 1927.0
	#define AZIMUTHMINVALUE 294.0
	#define AZIMUTHMAXVALUE 811.0
#endif

// Set Points

#define SETPT_EL_WHEN_FEEDING		1760.0f
#define SETPT_EL_SHOOT_AT_FEEDER	1684.0f
#define SETPT_EL_OPPONENT_PYRAMID	1678.0f
#define SETPT_EL_MIDFIELD			1683.0f

class Robot : public IterativeRobot {
public:
	// The following variables are automatically assigned by
	// robotbuilder and will be updated the next time you export to
	// Java from robot builder. Do not put any code or make any change
	// in the following block or it will be lost on an update. To
	// prevent this subsystem from being automatically updated, delete
	// the following line.
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static Drive* drive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// These are the commands we will be using. Once they are constructed they can be 
	// reused over and over
	
	static Command*			m_pStopElevCommand;
	static Command*			m_pStopAzimCommand;
	static Command*			m_pTurnrightCommand;
	static Command*			m_pTurnleftCommand;
	static Command*			m_pElevateupCommand;
	static Command*			m_pElevatedownCommand;
	static Command*         m_pStopShooterCommand;
	static Command*			m_pAutonomousCommand1;
	static Command*			m_pAutonomousCommand2;
	static Command*			m_pAutonomousCommand3;
	static Command*			m_pAutonomousCommand4;
	static Command*			m_pAutonomousCommand5;
	static Command*			m_pAutonomousCommand6;
	static Command*			m_pAutonomousCommand7;
	static Command*			m_pAutonomousCommand8;
	static Command*			m_pAutonomousCommand9;
	static Command*			m_pAutonomousCommand;
	static CommandGroup*	m_pAuto1;
	LiveWindow*				m_pLiveWnd;
	static OI*				m_pOperatorInterface;
	static ElControl*       elcontrol;
	static AzControl*       azcontrol;
	static ShootSolenoid*   shootsolenoid;
	static Shooter*         shooter;
	static PickupSystem*	m_pickupSystem;
	static CameraTilt*		m_pCamTiltSys;
	static PIDController*	m_pElevationPIDcontroller;
	static PIDController*	m_pAzimuthPIDcontroller;
	virtual void RobotInit();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();	
	void ConstructElevatorPID();
	void ConstructAzimuthPID();
	
	static bool m_motors_spinning;

};
#endif
